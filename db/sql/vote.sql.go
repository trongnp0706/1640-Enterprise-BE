// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: vote.sql

package db

import (
	"context"
)

const createVote = `-- name: CreateVote :one
INSERT INTO votes(
    id,
    user_id,
    idea_id,
    vote
) VALUES (
    $1,  $2,  $3, $4
)
RETURNING id, user_id, idea_id, vote
`

type CreateVoteParams struct {
	ID     string `json:"id"`
	UserID string `json:"user_id"`
	IdeaID string `json:"idea_id"`
	Vote   bool   `json:"vote"`
}

func (q *Queries) CreateVote(ctx context.Context, arg CreateVoteParams) (Vote, error) {
	row := q.db.QueryRowContext(ctx, createVote,
		arg.ID,
		arg.UserID,
		arg.IdeaID,
		arg.Vote,
	)
	var i Vote
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.IdeaID,
		&i.Vote,
	)
	return i, err
}

const deleteVote = `-- name: DeleteVote :one
DELETE FROM votes
WHERE id = $1
    RETURNING id, user_id, idea_id, vote
`

func (q *Queries) DeleteVote(ctx context.Context, id string) (Vote, error) {
	row := q.db.QueryRowContext(ctx, deleteVote, id)
	var i Vote
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.IdeaID,
		&i.Vote,
	)
	return i, err
}

const updateVoteDOWN = `-- name: UpdateVoteDOWN :one
UPDATE votes 
SET  vote = FALSE
WHERE id = $1
    RETURNING id, user_id, idea_id, vote
`

func (q *Queries) UpdateVoteDOWN(ctx context.Context, id string) (Vote, error) {
	row := q.db.QueryRowContext(ctx, updateVoteDOWN, id)
	var i Vote
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.IdeaID,
		&i.Vote,
	)
	return i, err
}

const updateVoteUP = `-- name: UpdateVoteUP :one
UPDATE votes 
SET  vote = TRUE
WHERE id = $1
    RETURNING id, user_id, idea_id, vote
`

func (q *Queries) UpdateVoteUP(ctx context.Context, id string) (Vote, error) {
	row := q.db.QueryRowContext(ctx, updateVoteUP, id)
	var i Vote
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.IdeaID,
		&i.Vote,
	)
	return i, err
}
