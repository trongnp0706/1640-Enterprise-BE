// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: comment.sql

package db

import (
	"context"
	"time"
)

const createComment = `-- name: CreateComment :one
INSERT INTO comments(
    id, 
    content,   
    is_anonymous, 
    user_id,
    idea_id,
    created_at
) VALUES (
    $1,  $2,  $3, $4, $5, $6
)
RETURNING id, content, is_anonymous, user_id, idea_id, created_at
`

type CreateCommentParams struct {
	ID          string    `json:"id"`
	Content     string    `json:"content"`
	IsAnonymous bool      `json:"is_anonymous"`
	UserID      string    `json:"user_id"`
	IdeaID      string    `json:"idea_id"`
	CreatedAt   time.Time `json:"created_at"`
}

func (q *Queries) CreateComment(ctx context.Context, arg CreateCommentParams) (Comment, error) {
	row := q.db.QueryRowContext(ctx, createComment,
		arg.ID,
		arg.Content,
		arg.IsAnonymous,
		arg.UserID,
		arg.IdeaID,
		arg.CreatedAt,
	)
	var i Comment
	err := row.Scan(
		&i.ID,
		&i.Content,
		&i.IsAnonymous,
		&i.UserID,
		&i.IdeaID,
		&i.CreatedAt,
	)
	return i, err
}

const deleteComment = `-- name: DeleteComment :one
DELETE FROM comments
WHERE id = $1
    RETURNING id, content, is_anonymous, user_id, idea_id, created_at
`

func (q *Queries) DeleteComment(ctx context.Context, id string) (Comment, error) {
	row := q.db.QueryRowContext(ctx, deleteComment, id)
	var i Comment
	err := row.Scan(
		&i.ID,
		&i.Content,
		&i.IsAnonymous,
		&i.UserID,
		&i.IdeaID,
		&i.CreatedAt,
	)
	return i, err
}

const getCommentsByIdea = `-- name: GetCommentsByIdea :many
Select id, content, is_anonymous, user_id, idea_id, created_at FROM comments 
WHERE idea_id = $1
LIMIT $2
OFFSET $3
`

type GetCommentsByIdeaParams struct {
	IdeaID string `json:"idea_id"`
	Limit  int32  `json:"limit"`
	Offset int32  `json:"offset"`
}

func (q *Queries) GetCommentsByIdea(ctx context.Context, arg GetCommentsByIdeaParams) ([]Comment, error) {
	rows, err := q.db.QueryContext(ctx, getCommentsByIdea, arg.IdeaID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Comment
	for rows.Next() {
		var i Comment
		if err := rows.Scan(
			&i.ID,
			&i.Content,
			&i.IsAnonymous,
			&i.UserID,
			&i.IdeaID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getLatestComment = `-- name: GetLatestComment :many
Select id, content, is_anonymous, user_id, idea_id, created_at FROM comments 
ORDER BY created_at DESC
LIMIT $1
OFFSET $2
`

type GetLatestCommentParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetLatestComment(ctx context.Context, arg GetLatestCommentParams) ([]Comment, error) {
	rows, err := q.db.QueryContext(ctx, getLatestComment, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Comment
	for rows.Next() {
		var i Comment
		if err := rows.Scan(
			&i.ID,
			&i.Content,
			&i.IsAnonymous,
			&i.UserID,
			&i.IdeaID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateComment = `-- name: UpdateComment :one
UPDATE comments
SET content = $1,
    is_anonymous = $2
WHERe id = $3
    RETURNING id, content, is_anonymous, user_id, idea_id, created_at
`

type UpdateCommentParams struct {
	Content     string `json:"content"`
	IsAnonymous bool   `json:"is_anonymous"`
	ID          string `json:"id"`
}

func (q *Queries) UpdateComment(ctx context.Context, arg UpdateCommentParams) (Comment, error) {
	row := q.db.QueryRowContext(ctx, updateComment, arg.Content, arg.IsAnonymous, arg.ID)
	var i Comment
	err := row.Scan(
		&i.ID,
		&i.Content,
		&i.IsAnonymous,
		&i.UserID,
		&i.IdeaID,
		&i.CreatedAt,
	)
	return i, err
}
