// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: department.sql

package db

import (
	"context"
)

const createDepartment = `-- name: CreateDepartment :one
INSERT INTO departments(
    id, department_name
)
VALUES (
           $1,  $2
       )
    RETURNING id, department_name
`

type CreateDepartmentParams struct {
	ID             string `json:"id"`
	DepartmentName string `json:"department_name"`
}

func (q *Queries) CreateDepartment(ctx context.Context, arg CreateDepartmentParams) (Department, error) {
	row := q.db.QueryRowContext(ctx, createDepartment, arg.ID, arg.DepartmentName)
	var i Department
	err := row.Scan(&i.ID, &i.DepartmentName)
	return i, err
}

const deleteDepartment = `-- name: DeleteDepartment :one
DELETE FROM departments
WHERE id = $1
    RETURNING id, department_name
`

func (q *Queries) DeleteDepartment(ctx context.Context, id string) (Department, error) {
	row := q.db.QueryRowContext(ctx, deleteDepartment, id)
	var i Department
	err := row.Scan(&i.ID, &i.DepartmentName)
	return i, err
}

const getAllDepartments = `-- name: GetAllDepartments :many
SELECT id, department_name FROM departments
`

func (q *Queries) GetAllDepartments(ctx context.Context) ([]Department, error) {
	rows, err := q.db.QueryContext(ctx, getAllDepartments)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Department
	for rows.Next() {
		var i Department
		if err := rows.Scan(&i.ID, &i.DepartmentName); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDepartmentById = `-- name: GetDepartmentById :one
SELECT id, department_name FROM departments WHERE id = $1
`

func (q *Queries) GetDepartmentById(ctx context.Context, id string) (Department, error) {
	row := q.db.QueryRowContext(ctx, getDepartmentById, id)
	var i Department
	err := row.Scan(&i.ID, &i.DepartmentName)
	return i, err
}

const updateDepartment = `-- name: UpdateDepartment :one
UPDATE departments
SET department_name = $1
WHERE id = $2
    RETURNING id, department_name
`

type UpdateDepartmentParams struct {
	DepartmentName string `json:"department_name"`
	ID             string `json:"id"`
}

func (q *Queries) UpdateDepartment(ctx context.Context, arg UpdateDepartmentParams) (Department, error) {
	row := q.db.QueryRowContext(ctx, updateDepartment, arg.DepartmentName, arg.ID)
	var i Department
	err := row.Scan(&i.ID, &i.DepartmentName)
	return i, err
}
