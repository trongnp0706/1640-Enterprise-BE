// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: category.sql

package db

import (
	"context"
)

const createCategory = `-- name: CreateCategory :one
INSERT INTO categories(
    id, category_name
)
VALUES (
           $1,  $2
       )
    RETURNING id, category_name
`

type CreateCategoryParams struct {
	ID           string `json:"id"`
	CategoryName string `json:"category_name"`
}

func (q *Queries) CreateCategory(ctx context.Context, arg CreateCategoryParams) (Category, error) {
	row := q.db.QueryRowContext(ctx, createCategory, arg.ID, arg.CategoryName)
	var i Category
	err := row.Scan(&i.ID, &i.CategoryName)
	return i, err
}

const deleteCategory = `-- name: DeleteCategory :one
DELETE FROM categories
WHERE id = $1
    RETURNING id, category_name
`

func (q *Queries) DeleteCategory(ctx context.Context, id string) (Category, error) {
	row := q.db.QueryRowContext(ctx, deleteCategory, id)
	var i Category
	err := row.Scan(&i.ID, &i.CategoryName)
	return i, err
}

const getAllCategories = `-- name: GetAllCategories :many
SELECT id, category_name FROM categories
`

func (q *Queries) GetAllCategories(ctx context.Context) ([]Category, error) {
	rows, err := q.db.QueryContext(ctx, getAllCategories)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Category
	for rows.Next() {
		var i Category
		if err := rows.Scan(&i.ID, &i.CategoryName); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCategoryById = `-- name: GetCategoryById :one
SELECT id, category_name FROM categories WHERE id = $1
`

func (q *Queries) GetCategoryById(ctx context.Context, id string) (Category, error) {
	row := q.db.QueryRowContext(ctx, getCategoryById, id)
	var i Category
	err := row.Scan(&i.ID, &i.CategoryName)
	return i, err
}

const updateCategory = `-- name: UpdateCategory :one
UPDATE categories
SET category_name = $1,
    id = $2
WHERE id = $3
    RETURNING id, category_name
`

type UpdateCategoryParams struct {
	CategoryName string `json:"category_name"`
	ID           string `json:"id"`
	ID_2         string `json:"id_2"`
}

func (q *Queries) UpdateCategory(ctx context.Context, arg UpdateCategoryParams) (Category, error) {
	row := q.db.QueryRowContext(ctx, updateCategory, arg.CategoryName, arg.ID, arg.ID_2)
	var i Category
	err := row.Scan(&i.ID, &i.CategoryName)
	return i, err
}
