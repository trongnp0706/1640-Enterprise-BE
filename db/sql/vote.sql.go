// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: vote.sql

package db

import (
	"context"
)

const createVote = `-- name: CreateVote :one
INSERT INTO votes(
    id,
    user_id,
    idea_id,
    vote
) VALUES (
    $1,  $2,  $3, $4
)
RETURNING id, user_id, idea_id, vote
`

type CreateVoteParams struct {
	ID     string `json:"id"`
	UserID string `json:"user_id"`
	IdeaID string `json:"idea_id"`
	Vote   string `json:"vote"`
}

func (q *Queries) CreateVote(ctx context.Context, arg CreateVoteParams) (Vote, error) {
	row := q.db.QueryRowContext(ctx, createVote,
		arg.ID,
		arg.UserID,
		arg.IdeaID,
		arg.Vote,
	)
	var i Vote
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.IdeaID,
		&i.Vote,
	)
	return i, err
}

const deleteVote = `-- name: DeleteVote :one
DELETE FROM votes
WHERE id = $1
    RETURNING id, user_id, idea_id, vote
`

func (q *Queries) DeleteVote(ctx context.Context, id string) (Vote, error) {
	row := q.db.QueryRowContext(ctx, deleteVote, id)
	var i Vote
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.IdeaID,
		&i.Vote,
	)
	return i, err
}

const getVote = `-- name: GetVote :one
SELECT id, user_id, idea_id, vote FROM votes WHERE user_id = $1 AND idea_id = $2
`

type GetVoteParams struct {
	UserID string `json:"user_id"`
	IdeaID string `json:"idea_id"`
}

func (q *Queries) GetVote(ctx context.Context, arg GetVoteParams) (Vote, error) {
	row := q.db.QueryRowContext(ctx, getVote, arg.UserID, arg.IdeaID)
	var i Vote
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.IdeaID,
		&i.Vote,
	)
	return i, err
}

const updateVote = `-- name: UpdateVote :one
UPDATE votes 
SET  vote = $1
WHERE id = $2
    RETURNING id, user_id, idea_id, vote
`

type UpdateVoteParams struct {
	Vote string `json:"vote"`
	ID   string `json:"id"`
}

func (q *Queries) UpdateVote(ctx context.Context, arg UpdateVoteParams) (Vote, error) {
	row := q.db.QueryRowContext(ctx, updateVote, arg.Vote, arg.ID)
	var i Vote
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.IdeaID,
		&i.Vote,
	)
	return i, err
}
