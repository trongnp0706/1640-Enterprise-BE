// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: academic_year.sql

package db

import (
	"context"
	"time"
)

const createAcademicYear = `-- name: CreateAcademicYear :one
INSERT INTO academic_years(
    academic_year, closure_date
)
VALUES (
           $1,  $2
       )
    RETURNING academic_year, closure_date
`

type CreateAcademicYearParams struct {
	AcademicYear string    `json:"academic_year"`
	ClosureDate  time.Time `json:"closure_date"`
}

func (q *Queries) CreateAcademicYear(ctx context.Context, arg CreateAcademicYearParams) (AcademicYear, error) {
	row := q.db.QueryRowContext(ctx, createAcademicYear, arg.AcademicYear, arg.ClosureDate)
	var i AcademicYear
	err := row.Scan(&i.AcademicYear, &i.ClosureDate)
	return i, err
}

const deleteAcademicYear = `-- name: DeleteAcademicYear :one
DELETE FROM academic_years
WHERE academic_year = $1
    RETURNING academic_year, closure_date
`

func (q *Queries) DeleteAcademicYear(ctx context.Context, academicYear string) (AcademicYear, error) {
	row := q.db.QueryRowContext(ctx, deleteAcademicYear, academicYear)
	var i AcademicYear
	err := row.Scan(&i.AcademicYear, &i.ClosureDate)
	return i, err
}

const getAcademicYear = `-- name: GetAcademicYear :one
SELECT academic_year, closure_date FROM academic_years WHERE academic_year = $1
`

func (q *Queries) GetAcademicYear(ctx context.Context, academicYear string) (AcademicYear, error) {
	row := q.db.QueryRowContext(ctx, getAcademicYear, academicYear)
	var i AcademicYear
	err := row.Scan(&i.AcademicYear, &i.ClosureDate)
	return i, err
}

const getAcademicYears = `-- name: GetAcademicYears :many
SELECT academic_year, closure_date FROM academic_years
`

func (q *Queries) GetAcademicYears(ctx context.Context) ([]AcademicYear, error) {
	rows, err := q.db.QueryContext(ctx, getAcademicYears)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AcademicYear
	for rows.Next() {
		var i AcademicYear
		if err := rows.Scan(&i.AcademicYear, &i.ClosureDate); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAcademicYear = `-- name: UpdateAcademicYear :one
UPDATE academic_years
SET academic_year = $1,
    closure_date = $2
WHERE academic_year = $3
    RETURNING academic_year, closure_date
`

type UpdateAcademicYearParams struct {
	AcademicYear   string    `json:"academic_year"`
	ClosureDate    time.Time `json:"closure_date"`
	AcademicYear_2 string    `json:"academic_year_2"`
}

func (q *Queries) UpdateAcademicYear(ctx context.Context, arg UpdateAcademicYearParams) (AcademicYear, error) {
	row := q.db.QueryRowContext(ctx, updateAcademicYear, arg.AcademicYear, arg.ClosureDate, arg.AcademicYear_2)
	var i AcademicYear
	err := row.Scan(&i.AcademicYear, &i.ClosureDate)
	return i, err
}
