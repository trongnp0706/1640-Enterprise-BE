// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: role.sql

package db

import (
	"context"
)

const createRole = `-- name: CreateRole :one
INSERT INTO roles(
    ticker, role_name
)
VALUES (
           $1,  $2
       )
    RETURNING ticker, role_name
`

type CreateRoleParams struct {
	Ticker   string `json:"ticker"`
	RoleName string `json:"role_name"`
}

func (q *Queries) CreateRole(ctx context.Context, arg CreateRoleParams) (Role, error) {
	row := q.db.QueryRowContext(ctx, createRole, arg.Ticker, arg.RoleName)
	var i Role
	err := row.Scan(&i.Ticker, &i.RoleName)
	return i, err
}

const deleteRole = `-- name: DeleteRole :one
DELETE FROM roles
WHERE ticker = $1
    RETURNING ticker, role_name
`

func (q *Queries) DeleteRole(ctx context.Context, ticker string) (Role, error) {
	row := q.db.QueryRowContext(ctx, deleteRole, ticker)
	var i Role
	err := row.Scan(&i.Ticker, &i.RoleName)
	return i, err
}

const getRoleByTicker = `-- name: GetRoleByTicker :one
SELECT ticker, role_name FROM roles WHERE ticker = $1
`

func (q *Queries) GetRoleByTicker(ctx context.Context, ticker string) (Role, error) {
	row := q.db.QueryRowContext(ctx, getRoleByTicker, ticker)
	var i Role
	err := row.Scan(&i.Ticker, &i.RoleName)
	return i, err
}

const listRoles = `-- name: ListRoles :many
SELECT role_name, ticker FROM roles
`

type ListRolesRow struct {
	RoleName string `json:"role_name"`
	Ticker   string `json:"ticker"`
}

func (q *Queries) ListRoles(ctx context.Context) ([]ListRolesRow, error) {
	rows, err := q.db.QueryContext(ctx, listRoles)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListRolesRow
	for rows.Next() {
		var i ListRolesRow
		if err := rows.Scan(&i.RoleName, &i.Ticker); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateRole = `-- name: UpdateRole :one
UPDATE roles
SET role_name = $1, ticker = $2
WHERE ticker = $3
    RETURNING ticker, role_name
`

type UpdateRoleParams struct {
	RoleName string `json:"role_name"`
	Ticker   string `json:"ticker"`
	Ticker_2 string `json:"ticker_2"`
}

func (q *Queries) UpdateRole(ctx context.Context, arg UpdateRoleParams) (Role, error) {
	row := q.db.QueryRowContext(ctx, updateRole, arg.RoleName, arg.Ticker, arg.Ticker_2)
	var i Role
	err := row.Scan(&i.Ticker, &i.RoleName)
	return i, err
}
